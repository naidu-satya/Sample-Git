package DSA_BinarySearch;

public class OrderAgnisticBinarySearch {
    public static void main(String[] args) {
    int[] arr = { 99, 87, 43, 23, 11, 5, 3, 0, -2, -3, -4, -14};
    //int[] arr = {-18, -4, 0, 2, 4, 5, 8, 12, 33, 45, 56 , 89};
    int target = -4 ;
    int ans = orderAgnosticBinary(arr, target);
    System.out.println(ans);
    }


    //return index if target found or return -1
    static int orderAgnosticBinary (int[] arr, int target){
        int start = 0;
        int end = arr.length - 1;

//        if(arr[start] < arr[end]){
//            isAsc = true;
//        }
//        else
//            isAsc = false;    or
        boolean isAsc = arr[start] < arr[end];
        while(start <= end) {
            //find the middle element
            //int mid = (start + end) / 2;    //might be possible that it may exceed the integer range
            int mid = start + (end - start) / 2;

            if (arr[mid] == target) {
                return mid;
            }

            if (isAsc) {
                if (target > arr[mid])
                    start = mid + 1;
                else if (target < arr[mid])
                    end = mid - 1;
            } else {
                if (target < arr[mid])
                    start = mid + 1;
                else if (target > arr[mid])
                    end = mid - 1;
            }
        }
        return -1;
    }
}
