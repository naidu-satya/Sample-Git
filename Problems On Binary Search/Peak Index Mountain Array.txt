package ProblemsOnBinarySearch;
//finding the peak index in mountain array
public class MountainArray {
    public static void main(String[] args) {
    int[] arr = {1, 3, 5, 6, 7, 9, 4, 2 };
    int ans = peakIndexInMountainArray(arr);
        System.out.println(ans);
    }

    public static int peakIndexInMountainArray(int[] arr) {
        int start =0;
        int end = arr.length - 1;
        while(start < end){
            int mid = start + (end - start) /2;
            if(arr[mid] > arr[mid+1]){
                //you are in the decreasing part of array
                //so this may be the possible ans, but look to left side
                // end != mid -1, cuz we don't know that the mid -1 is greater than mid or not
                end = mid;
            }
            else if(arr[mid] < arr[mid+1]){
                //now you are in increasing part of the array
                //this may be the possible ans , but look right
                start = mid + 1;
                // start = mid+1, cuz we know that mid is not greater than mid +1, so ignore mid
            }
        }
        //In the end, start == end , pointing to the largest elememt cuz of above 2 checks
        //Start and end is trying to find the max element from above 2 checks
        //hence, they are poiting to the same elememt , this will be the max element
        //more eloboration: for every point of time , start and end has the possible answer till that time
        //and if we are saying that we have only one element remaining, this might be the possible answer
        return start; //or "return end" as both start and end are =
    }
}
