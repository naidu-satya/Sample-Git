package ProblemsOnBinarySearch;

public class FirstIndexOfTargetInMountainArray {
    public static void main(String[] args) {
    int[] arr = {1, 2, 3,5, 7, 9, 6, 3, 1};
    int target = 3;
    int ans = search(arr, target);
        System.out.println(ans);
    }


    static int search(int[] arr, int target) {
        int peak = peakIndexInMountainArray(arr);
        int firstTry = orderAgnosticBinary(arr, target, 0, peak);
        if(firstTry != -1){
            return firstTry;
        }
        else
            return orderAgnosticBinary(arr, target, peak, arr.length-1);
    }
    public static int peakIndexInMountainArray(int[] arr) {
        int start =0;
        int end = arr.length - 1;
        while(start < end){
            int mid = start + (end - start) /2;
            if(arr[mid] > arr[mid+1]){
                //you are in the decreasing part of array
                //so this may be the possible ans, but look to left side
                // end != mid -1, cuz we don't know that the mid -1 is greater than mid or not
                end = mid;
            }
            else if(arr[mid] < arr[mid+1]){
                //now you are in increasing part of the array
                //this may be the possible ans , but look right
                start = mid + 1;
                // start = mid+1, cuz we know that mid is not greater than mid +1, so ignore mid
            }
        }
        //In the end, start == end , pointing to the largest elememt cuz of above 2 checks
        //Start and end is trying to find the max element from above 2 checks
        //hence, they are poiting to the same elememt , this will be the max element
        //more eloboration: for every point of time , start and end has the possible answer till that time
        //and if we are saying that we have only one element remaining, this might be the possible answer
        return start; //or "return end" as both start and end are =
    }


    static int orderAgnosticBinary (int[] arr, int target, int start, int end){

//        if(arr[start] < arr[end]){
//            isAsc = true;
//        }
//        else
//            isAsc = false;    or
        boolean isAsc = arr[start] < arr[end];
        while(start <= end) {
            //find the middle element
            //int mid = (start + end) / 2;    //might be possible that it may exceed the integer range
            int mid = start + (end - start) / 2;

            if (arr[mid] == target) {
                return mid;
            }

            if (isAsc) {
                if (target > arr[mid])
                    start = mid + 1;
                else if (target < arr[mid])
                    end = mid - 1;
            } else {
                if (target < arr[mid])
                    start = mid + 1;
                else if (target > arr[mid])
                    end = mid - 1;
            }
        }
        return -1;
    }
}
