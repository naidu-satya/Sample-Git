package ProblemsOnBinarySearch;

public class SearchInRotatedSortedArray {
    public static void main(String[] args) {
        int [] arr = {1,3};
        System.out.println(search(arr, 3));
    }


    public  static int search(int[] nums, int target) {
    int pivot = findPivot(nums);
//    if(nums.length == 1){
//        return nums[0];
//    }
    if(pivot == -1){
        binarysearch(nums, target, 0, nums.length-1);
    }
    if(nums[pivot] == target){
        return pivot;
    }
    if(target >= nums[0]){
        return binarysearch(nums, target, 0, pivot-1);
    }
    else if(target < nums[0]){
        return binarysearch(nums, target, pivot+1, nums.length-1);
    }
    return -1;
    }
    static int findPivot(int[] arr){
        int start = 0;
        int end = arr.length - 1;
        while(start <= end){
            int mid = start + (end - start) / 2;
            // 4 cases to find pivot(pivot is the largest element in the roated array
            //case-1: if the middle element > mid + 1, then the middle will be the pivot
            if(mid < end && arr[mid] > arr[mid + 1] ){
                return mid;
            }
            //case-2: if the middle < mid -1 , then the mid-1 will be the pivot
            if(mid > start && arr[mid] < arr[mid -1]){
                return mid - 1;
            }
            if(arr[mid] <= arr[start]){
                end = mid - 1;
            }
            else if(arr[mid] > arr[start]){
                start = mid + 1;
            }

        }
        return start % arr.length;
    }


    static int binarysearch(int[] arr, int target, int start, int end){

        while(start <= end){
            //find the middle element
            //int mid = (start + end) / 2    //might be possible that it may exceed the integer range
            int mid = start + (end - start) /2;
            if(target < arr[mid])
                end = mid -1;
            else if(target > arr[mid])
                start = mid + 1;
            else
                return mid;
        }
        return -1;
    }
}
